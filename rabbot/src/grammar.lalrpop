use super::ast::*;
use super::token::Token;
use syntax::ast::Ident;
use syntax::parse::token::{Token as RsToken, DelimToken};

grammar;

extern {
    enum Token {
        Ident => Token::RustToken(RsToken::Ident(<Ident>)),
        Lbrace => Token::RustToken(RsToken::OpenDelim(DelimToken::Brace)),
        Rbrace => Token::RustToken(RsToken::CloseDelim(DelimToken::Brace)),
        Lparen => Token::RustToken(RsToken::OpenDelim(DelimToken::Paren)),
        Rparen => Token::RustToken(RsToken::CloseDelim(DelimToken::Paren)),
        Gt => Token::RustToken(RsToken::Gt),
        Lt => Token::RustToken(RsToken::Lt),
        Dot => Token::RustToken(RsToken::Dot),
        Comma => Token::RustToken(RsToken::Comma),
        ModSep => Token::RustToken(RsToken::ModSep),
        Semi => Token::RustToken(RsToken::Semi),
        Sort => Token::Sort,
        Binding => Token::Binding,
        Use => Token::Use,
        Vec => Token::Vec,
    }
}

pub Decls: Vec<Decl> = { Decl+ };

Sep<T, S>: Vec<T> = {
    <ts:(<T> S)*> <t:T> => {
        let mut ts = ts;
        ts.push(t);
        ts
    }
};

Decl: Decl = {
    Sort <id:Ident> Lbrace <items:Sep<Item, Comma>> Rbrace => Decl::Sort(id, items),
    Use <path:Sep<Ident, ModSep>> Semi =>
        Decl::Use(path.into_iter()
            .map(|id| id.name.as_str().to_string())
            .collect::<Vec<String>>()
            .join("::"))
};

Item: Item = {
    <id:Ident> <ty:(Lparen <Type> Rparen)?> => (id, ty)
};

Type: Type = {
    <l:TyAtom> Dot <r:Type> => Type::Var(box l, box r),
    TyAtom
};

TyAtom: Type = {
    Binding Lt <id:Ident> Gt => Type::Bind(id),
    Vec Lt <ty:Type> Gt => Type::Vec(box ty),
    Ident => Type::Ident(<>),
    Lparen <tys:Sep<Type, Comma>> Rparen => Type::Prod(tys),
};